"""
✨ `Task_KeyOutput` returns the primary key fields of table type `Task`.

It has the same format as `Task_Key`, but is only used as mutation return value.
"""
scalar Task_KeyOutput
"""
✨ `TaskList_KeyOutput` returns the primary key fields of table type `TaskList`.

It has the same format as `TaskList_Key`, but is only used as mutation return value.
"""
scalar TaskList_KeyOutput
"""
✨ `User_KeyOutput` returns the primary key fields of table type `User`.

It has the same format as `User_Key`, but is only used as mutation return value.
"""
scalar User_KeyOutput
"""
✨ Generated data input type for table 'Task'. It includes all necessary fields for creating or upserting rows into table.
"""
input Task_Data {
  """
  ✨ Generated from Field `Task`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Task`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Task`.`taskListId` of type `UUID`
  """
  taskListId: UUID
  """
  ✨ `_expr` server value variant of `taskListId` (✨ Generated from Field `Task`.`taskListId` of type `UUID`)
  """
  taskListId_expr: UUID_Expr
  """
  ✨ Generated from Field `Task`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `Task`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `Task`.`taskList` of type `TaskList`
  """
  taskList: TaskList_Key
  """
  ✨ Generated from Field `Task`.`user` of type `User!`
  """
  user: User_Key
  """
  ✨ Generated from Field `Task`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `Task`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `Task`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ `_update` server value variant of `createdAt` (✨ Generated from Field `Task`.`createdAt` of type `Timestamp!`)
  """
  createdAt_update: [Timestamp_Update!]
  """
  ✨ Generated from Field `Task`.`description` of type `String!`
  """
  description: String
  """
  ✨ `_expr` server value variant of `description` (✨ Generated from Field `Task`.`description` of type `String!`)
  """
  description_expr: String_Expr
  """
  ✨ Generated from Field `Task`.`dueDate` of type `Date`
  """
  dueDate: Date
  """
  ✨ `_date` server value variant of `dueDate` (✨ Generated from Field `Task`.`dueDate` of type `Date`)
  """
  dueDate_date: Date_Relative
  """
  ✨ `_expr` server value variant of `dueDate` (✨ Generated from Field `Task`.`dueDate` of type `Date`)
  """
  dueDate_expr: Date_Expr
  """
  ✨ `_update` server value variant of `dueDate` (✨ Generated from Field `Task`.`dueDate` of type `Date`)
  """
  dueDate_update: [Date_Update!]
  """
  ✨ Generated from Field `Task`.`isCompleted` of type `Boolean!`
  """
  isCompleted: Boolean
  """
  ✨ `_expr` server value variant of `isCompleted` (✨ Generated from Field `Task`.`isCompleted` of type `Boolean!`)
  """
  isCompleted_expr: Boolean_Expr
}
"""
✨ Generated filter input type for table 'Task'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Task_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Task_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Task_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Task_Filter!]
  """
  ✨ Generated from Field `Task`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Task`.`taskListId` of type `UUID`
  """
  taskListId: UUID_Filter
  """
  ✨ Generated from Field `Task`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `Task`.`taskList` of type `TaskList`
  """
  taskList: TaskList_Filter
  """
  ✨ Generated from Field `Task`.`user` of type `User!`
  """
  user: User_Filter
  """
  ✨ Generated from Field `Task`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `Task`.`description` of type `String!`
  """
  description: String_Filter
  """
  ✨ Generated from Field `Task`.`dueDate` of type `Date`
  """
  dueDate: Date_Filter
  """
  ✨ Generated from Field `Task`.`isCompleted` of type `Boolean!`
  """
  isCompleted: Boolean_Filter
}
"""
✨ Generated first-row input type for table 'Task'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Task_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Task_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Task_Filter
}
"""
✨ Generated having input type for table 'Task'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Task_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [Task_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: Task_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [Task_Having!]
  """
  ✨ Generated from Field `Task`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `Task`.`createdAt_count` of type `Int!`
  """
  createdAt_count: Int_Filter
  """
  ✨ Generated from Field `Task`.`description_count` of type `Int!`
  """
  description_count: Int_Filter
  """
  ✨ Generated from Field `Task`.`dueDate_count` of type `Int!`
  """
  dueDate_count: Int_Filter
  """
  ✨ Generated from Field `Task`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `Task`.`isCompleted_count` of type `Int!`
  """
  isCompleted_count: Int_Filter
  """
  ✨ Generated from Field `Task`.`taskListId_count` of type `Int!`
  """
  taskListId_count: Int_Filter
  """
  ✨ Generated from Field `Task`.`userId_count` of type `Int!`
  """
  userId_count: Int_Filter
  """
  ✨ Generated from Field `Task`.`createdAt_min` of type `Timestamp`
  """
  createdAt_min: Timestamp_Filter
  """
  ✨ Generated from Field `Task`.`dueDate_min` of type `Date`
  """
  dueDate_min: Date_Filter
  """
  ✨ Generated from Field `Task`.`createdAt_max` of type `Timestamp`
  """
  createdAt_max: Timestamp_Filter
  """
  ✨ Generated from Field `Task`.`dueDate_max` of type `Date`
  """
  dueDate_max: Date_Filter
}
"""
✨ Generated key input type for table 'Task'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Task_Key {
  """
  ✨ Generated from Field `Task`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Task`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Task'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Task_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Task_Filter
}
"""
✨ Generated order input type for table 'Task'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Task_Order {
  """
  ✨ Generated from Field `Task`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Task`.`taskListId` of type `UUID`
  """
  taskListId: OrderDirection
  """
  ✨ Generated from Field `Task`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `Task`.`taskList` of type `TaskList`
  """
  taskList: TaskList_Order
  """
  ✨ Generated from Field `Task`.`user` of type `User!`
  """
  user: User_Order
  """
  ✨ Generated from Field `Task`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `Task`.`description` of type `String!`
  """
  description: OrderDirection
  """
  ✨ Generated from Field `Task`.`dueDate` of type `Date`
  """
  dueDate: OrderDirection
  """
  ✨ Generated from Field `Task`.`isCompleted` of type `Boolean!`
  """
  isCompleted: OrderDirection
  """
  ✨ Generated from Field `Task`.`_count` of type `Int!`
  """
  _count: OrderDirection
  """
  ✨ Generated from Field `Task`.`createdAt_count` of type `Int!`
  """
  createdAt_count: OrderDirection
  """
  ✨ Generated from Field `Task`.`description_count` of type `Int!`
  """
  description_count: OrderDirection
  """
  ✨ Generated from Field `Task`.`dueDate_count` of type `Int!`
  """
  dueDate_count: OrderDirection
  """
  ✨ Generated from Field `Task`.`id_count` of type `Int!`
  """
  id_count: OrderDirection
  """
  ✨ Generated from Field `Task`.`isCompleted_count` of type `Int!`
  """
  isCompleted_count: OrderDirection
  """
  ✨ Generated from Field `Task`.`taskListId_count` of type `Int!`
  """
  taskListId_count: OrderDirection
  """
  ✨ Generated from Field `Task`.`userId_count` of type `Int!`
  """
  userId_count: OrderDirection
  """
  ✨ Generated from Field `Task`.`createdAt_min` of type `Timestamp`
  """
  createdAt_min: OrderDirection
  """
  ✨ Generated from Field `Task`.`dueDate_min` of type `Date`
  """
  dueDate_min: OrderDirection
  """
  ✨ Generated from Field `Task`.`createdAt_max` of type `Timestamp`
  """
  createdAt_max: OrderDirection
  """
  ✨ Generated from Field `Task`.`dueDate_max` of type `Date`
  """
  dueDate_max: OrderDirection
}
"""
✨ Generated data input type for table 'TaskList'. It includes all necessary fields for creating or upserting rows into table.
"""
input TaskList_Data {
  """
  ✨ Generated from Field `TaskList`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `TaskList`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `TaskList`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `TaskList`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `TaskList`.`user` of type `User!`
  """
  user: User_Key
  """
  ✨ Generated from Field `TaskList`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `TaskList`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `TaskList`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ `_update` server value variant of `createdAt` (✨ Generated from Field `TaskList`.`createdAt` of type `Timestamp!`)
  """
  createdAt_update: [Timestamp_Update!]
  """
  ✨ Generated from Field `TaskList`.`name` of type `String!`
  """
  name: String
  """
  ✨ `_expr` server value variant of `name` (✨ Generated from Field `TaskList`.`name` of type `String!`)
  """
  name_expr: String_Expr
}
"""
✨ Generated filter input type for table 'TaskList'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input TaskList_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [TaskList_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: TaskList_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [TaskList_Filter!]
  """
  ✨ Generated from Field `TaskList`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `TaskList`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `TaskList`.`user` of type `User!`
  """
  user: User_Filter
  """
  ✨ Generated from Field `TaskList`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `TaskList`.`name` of type `String!`
  """
  name: String_Filter
  """
  ✨ Generated from Field `TaskList`.`tasks_on_taskList` of type `[Task!]!`
  """
  tasks_on_taskList: Task_ListFilter
}
"""
✨ Generated first-row input type for table 'TaskList'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input TaskList_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [TaskList_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: TaskList_Filter
}
"""
✨ Generated having input type for table 'TaskList'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input TaskList_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [TaskList_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: TaskList_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [TaskList_Having!]
  """
  ✨ Generated from Field `TaskList`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `TaskList`.`createdAt_count` of type `Int!`
  """
  createdAt_count: Int_Filter
  """
  ✨ Generated from Field `TaskList`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `TaskList`.`name_count` of type `Int!`
  """
  name_count: Int_Filter
  """
  ✨ Generated from Field `TaskList`.`userId_count` of type `Int!`
  """
  userId_count: Int_Filter
  """
  ✨ Generated from Field `TaskList`.`createdAt_min` of type `Timestamp`
  """
  createdAt_min: Timestamp_Filter
  """
  ✨ Generated from Field `TaskList`.`createdAt_max` of type `Timestamp`
  """
  createdAt_max: Timestamp_Filter
}
"""
✨ Generated key input type for table 'TaskList'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input TaskList_Key {
  """
  ✨ Generated from Field `TaskList`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `TaskList`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'TaskList'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input TaskList_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: TaskList_Filter
}
"""
✨ Generated order input type for table 'TaskList'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input TaskList_Order {
  """
  ✨ Generated from Field `TaskList`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `TaskList`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `TaskList`.`user` of type `User!`
  """
  user: User_Order
  """
  ✨ Generated from Field `TaskList`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `TaskList`.`name` of type `String!`
  """
  name: OrderDirection
  """
  ✨ Generated from Field `TaskList`.`_count` of type `Int!`
  """
  _count: OrderDirection
  """
  ✨ Generated from Field `TaskList`.`createdAt_count` of type `Int!`
  """
  createdAt_count: OrderDirection
  """
  ✨ Generated from Field `TaskList`.`id_count` of type `Int!`
  """
  id_count: OrderDirection
  """
  ✨ Generated from Field `TaskList`.`name_count` of type `Int!`
  """
  name_count: OrderDirection
  """
  ✨ Generated from Field `TaskList`.`userId_count` of type `Int!`
  """
  userId_count: OrderDirection
  """
  ✨ Generated from Field `TaskList`.`createdAt_min` of type `Timestamp`
  """
  createdAt_min: OrderDirection
  """
  ✨ Generated from Field `TaskList`.`createdAt_max` of type `Timestamp`
  """
  createdAt_max: OrderDirection
}
"""
✨ Generated data input type for table 'User'. It includes all necessary fields for creating or upserting rows into table.
"""
input User_Data {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `User`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `User`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `User`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `User`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ `_update` server value variant of `createdAt` (✨ Generated from Field `User`.`createdAt` of type `Timestamp!`)
  """
  createdAt_update: [Timestamp_Update!]
  """
  ✨ Generated from Field `User`.`displayName` of type `String!`
  """
  displayName: String
  """
  ✨ `_expr` server value variant of `displayName` (✨ Generated from Field `User`.`displayName` of type `String!`)
  """
  displayName_expr: String_Expr
  """
  ✨ Generated from Field `User`.`email` of type `String`
  """
  email: String
  """
  ✨ `_expr` server value variant of `email` (✨ Generated from Field `User`.`email` of type `String`)
  """
  email_expr: String_Expr
}
"""
✨ Generated filter input type for table 'User'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input User_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [User_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: User_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [User_Filter!]
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `User`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `User`.`displayName` of type `String!`
  """
  displayName: String_Filter
  """
  ✨ Generated from Field `User`.`email` of type `String`
  """
  email: String_Filter
  """
  ✨ Generated from Field `User`.`tasks_on_user` of type `[Task!]!`
  """
  tasks_on_user: Task_ListFilter
  """
  ✨ Generated from Field `User`.`taskLists_on_user` of type `[TaskList!]!`
  """
  taskLists_on_user: TaskList_ListFilter
}
"""
✨ Generated first-row input type for table 'User'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input User_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [User_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: User_Filter
}
"""
✨ Generated having input type for table 'User'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input User_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [User_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: User_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [User_Having!]
  """
  ✨ Generated from Field `User`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `User`.`createdAt_count` of type `Int!`
  """
  createdAt_count: Int_Filter
  """
  ✨ Generated from Field `User`.`displayName_count` of type `Int!`
  """
  displayName_count: Int_Filter
  """
  ✨ Generated from Field `User`.`email_count` of type `Int!`
  """
  email_count: Int_Filter
  """
  ✨ Generated from Field `User`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `User`.`createdAt_min` of type `Timestamp`
  """
  createdAt_min: Timestamp_Filter
  """
  ✨ Generated from Field `User`.`createdAt_max` of type `Timestamp`
  """
  createdAt_max: Timestamp_Filter
}
"""
✨ Generated key input type for table 'User'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input User_Key {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `User`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'User'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input User_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: User_Filter
}
"""
✨ Generated order input type for table 'User'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input User_Order {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `User`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `User`.`displayName` of type `String!`
  """
  displayName: OrderDirection
  """
  ✨ Generated from Field `User`.`email` of type `String`
  """
  email: OrderDirection
  """
  ✨ Generated from Field `User`.`_count` of type `Int!`
  """
  _count: OrderDirection
  """
  ✨ Generated from Field `User`.`createdAt_count` of type `Int!`
  """
  createdAt_count: OrderDirection
  """
  ✨ Generated from Field `User`.`displayName_count` of type `Int!`
  """
  displayName_count: OrderDirection
  """
  ✨ Generated from Field `User`.`email_count` of type `Int!`
  """
  email_count: OrderDirection
  """
  ✨ Generated from Field `User`.`id_count` of type `Int!`
  """
  id_count: OrderDirection
  """
  ✨ Generated from Field `User`.`createdAt_min` of type `Timestamp`
  """
  createdAt_min: OrderDirection
  """
  ✨ Generated from Field `User`.`createdAt_max` of type `Timestamp`
  """
  createdAt_max: OrderDirection
}
