{
  "version": "1.0.0",
  "generatedAt": "2025-10-01T05:26:39.507Z",
  "source": {
    "type": "bmad-story",
    "file": "docs/stories/1.4.feed-entry-ingestion.md"
  },
  "story": {
    "id": "1.4",
    "title": "Feed Entry Ingestion Pipeline",
    "status": "Ready for Review",
    "userStory": "**As a** platform operator managing Pod.Style content,\n**I want** creation publish events to populate `personalized_feed_cache` and `feed_entries` with the latest ranking signals,\n**so that** the new feed experience always serves fresh, curated data without manual intervention.",
    "acceptanceCriteria": [
      "Cloud Function `updatePersonalizedFeedCache` (or an extended companion function) listens to creation publish events, builds feed documents enriched with engagement defaults, personalization placeholders, and writes to `personalized_feed_cache` / `feed_entries` collections while leaving existing functionality intact.",
      "The ingestion pipeline normalizes required fields (`region`, `personaVector`, `rankingSignals`, `updatedAt`) and ensures backward-compatible writes that legacy readers can consume.",
      "The pipeline emits events/metrics when feed entries are created or updated, including failure alerts, and supports reprocessing triggered via an admin command or scheduled job.",
      "Integration tests confirm that publishing a creation (in emulator) results in feed cache entries being created and available to Stories 1.1–1.3 services without affecting legacy pathways.",
      "Rollout plan includes feature flag / Remote Config gating for the new pipeline, plus documented rollback procedure."
    ],
    "tasks": [
      {
        "title": "Pipeline design & setup (AC: 1,2)",
        "status": "done",
        "subtasks": [
          {
            "title": "Extend or wrap `updatePersonalizedFeedCache` Cloud Function to populate new fields (`rankingSignals`, `personaVector`, etc.) using default values.",
            "status": "done",
            "subtasks": []
          },
          {
            "title": "Ensure writes target both `personalized_feed_cache` and `feed_entries` with denormalized data.",
            "status": "done",
            "subtasks": []
          }
        ]
      },
      {
        "title": "Backward compatibility safeguards (AC: 2)",
        "status": "done",
        "subtasks": [
          {
            "title": "Validate that legacy readers ignore new fields; add unit tests or emulator checks.",
            "status": "done",
            "subtasks": []
          },
          {
            "title": "Provide backfill script/instructions for existing documents.",
            "status": "done",
            "subtasks": []
          }
        ]
      },
      {
        "title": "Reprocessing & observability (AC: 3)",
        "status": "done",
        "subtasks": [
          {
            "title": "Emit `feed.ingestion.success/failure` metrics and log errors with actionable context.",
            "status": "done",
            "subtasks": []
          },
          {
            "title": "Implement admin-triggered reprocess (CLI or callable) to refresh cache entries.",
            "status": "done",
            "subtasks": []
          }
        ]
      },
      {
        "title": "Testing (AC: 4)",
        "status": "done",
        "subtasks": [
          {
            "title": "Emulator-based integration test: publishing a creation triggers feed cache update and makes entry available to feed service.",
            "status": "done",
            "subtasks": []
          },
          {
            "title": "Unit tests covering new transformation logic.",
            "status": "done",
            "subtasks": []
          }
        ]
      },
      {
        "title": "Rollout & rollback (AC: 5)",
        "status": "done",
        "subtasks": [
          {
            "title": "Add feature flag / Remote Config switch to toggle new ingestion path.",
            "status": "done",
            "subtasks": []
          },
          {
            "title": "Document rollback plan (disable flag, purge new fields if needed) in deployment guide.",
            "status": "done",
            "subtasks": []
          }
        ]
      }
    ],
    "devNotes": {
      "Previous Story Insights": [
        "Stories 1.1–1.3 created feed route, caching, and ranking logic; they rely on populated cache entries."
      ],
      "Data Models": [
        "`personalized_feed_cache` and `feed_entries` hold denormalized feed data with optional ranking/per personalization fields.",
        "`[Source: architecture.md#5-data-architecture]`",
        "Engagement counters originate from `creations`; defaults should be zero/empty when publishing.",
        "`[Source: architecture-brownfield.md#53-data-model]`"
      ],
      "API & Service Specifications": [
        "Feed service expects cache entries to be ready; ingestion pipeline should orchestrate data flow from creation events.",
        "`[Source: architecture.md#4-application-architecture]`",
        "Cloud Function currently refreshes cache periodically; extend without breaking schedule.",
        "`[Source: architecture-brownfield.md#52-backend-services]`"
      ],
      "Component Specifications": [
        "No UI change; ensure admin tools can trigger reprocess if needed (document CLI/API).",
        "`[Source: architecture.md#3-business-user-experience-architecture]`"
      ],
      "File Locations & Project Structure": [
        "Cloud Function code under `functions/` (or `src/server` if consolidated) should follow existing structure.",
        "`[Source: architecture-brownfield.md#52-backend-services]`",
        "Backfill scripts/config placed in `scripts/` or `docs/` as per project conventions.",
        "`[Source: architecture.md#41-components--responsibilities]`"
      ],
      "Testing Requirements": [
        "Emulator tests for Firestore triggers ensure new documents appear and optional fields handled.  `[Source: architecture.md#8-testing-strategy]`",
        "Integration tests verifying feed service gets freshly ingested entries.  `[Source: architecture.md#8-testing-strategy]`"
      ],
      "Technical Constraints": [
        "Writes must be idempotent, safe for retries, and not break legacy data readers.",
        "`[Source: architecture.md#2-Enhancement-Scope-and-Integration-Strategy]`",
        "Maintain feature flag gating to control rollout; rollback doc required.",
        "`[Source: architecture-brownfield.md#10-migration--rollout-strategy]`",
        "Observability metrics must integrate with existing logging/alerts.",
        "`[Source: architecture.md#74-observability]`"
      ]
    },
    "testing": [
      "Jest unit tests覆盖 ingestion transformation（成功/失败场景）。 `[Source: architecture.md#8-testing-strategy]`",
      "Jest 集成测试（stubbed Firestore）验证 creation -> cache entry pipeline。 `[Source: architecture.md#8-testing-strategy]`",
      "Playwright `/beta` 检查 & 手动回归确保 legacy feed 不受影响。 `[Source: architecture.md#73-deployment-strategy]`"
    ]
  },
  "augment": {
    "recommendedPlaybooks": {
      "design": [
        {
          "name": "AC-1",
          "goal": "Cloud Function `updatePersonalizedFeedCache` (or an extended companion function) listens to creation publish events, builds feed documents enriched with engagement defaults, personalization placeholders, and writes to `personalized_feed_cache` / `feed_entries` collections while leaving existing functionality intact."
        },
        {
          "name": "AC-2",
          "goal": "The ingestion pipeline normalizes required fields (`region`, `personaVector`, `rankingSignals`, `updatedAt`) and ensures backward-compatible writes that legacy readers can consume."
        },
        {
          "name": "AC-3",
          "goal": "The pipeline emits events/metrics when feed entries are created or updated, including failure alerts, and supports reprocessing triggered via an admin command or scheduled job."
        },
        {
          "name": "AC-4",
          "goal": "Integration tests confirm that publishing a creation (in emulator) results in feed cache entries being created and available to Stories 1.1–1.3 services without affecting legacy pathways."
        },
        {
          "name": "AC-5",
          "goal": "Rollout plan includes feature flag / Remote Config gating for the new pipeline, plus documented rollback procedure."
        }
      ],
      "implementation": [
        {
          "title": "Pipeline design & setup (AC: 1,2)",
          "status": "done",
          "subtasks": [
            {
              "title": "Extend or wrap `updatePersonalizedFeedCache` Cloud Function to populate new fields (`rankingSignals`, `personaVector`, etc.) using default values.",
              "status": "done",
              "subtasks": []
            },
            {
              "title": "Ensure writes target both `personalized_feed_cache` and `feed_entries` with denormalized data.",
              "status": "done",
              "subtasks": []
            }
          ]
        },
        {
          "title": "Backward compatibility safeguards (AC: 2)",
          "status": "done",
          "subtasks": [
            {
              "title": "Validate that legacy readers ignore new fields; add unit tests or emulator checks.",
              "status": "done",
              "subtasks": []
            },
            {
              "title": "Provide backfill script/instructions for existing documents.",
              "status": "done",
              "subtasks": []
            }
          ]
        },
        {
          "title": "Reprocessing & observability (AC: 3)",
          "status": "done",
          "subtasks": [
            {
              "title": "Emit `feed.ingestion.success/failure` metrics and log errors with actionable context.",
              "status": "done",
              "subtasks": []
            },
            {
              "title": "Implement admin-triggered reprocess (CLI or callable) to refresh cache entries.",
              "status": "done",
              "subtasks": []
            }
          ]
        },
        {
          "title": "Testing (AC: 4)",
          "status": "done",
          "subtasks": [
            {
              "title": "Emulator-based integration test: publishing a creation triggers feed cache update and makes entry available to feed service.",
              "status": "done",
              "subtasks": []
            },
            {
              "title": "Unit tests covering new transformation logic.",
              "status": "done",
              "subtasks": []
            }
          ]
        },
        {
          "title": "Rollout & rollback (AC: 5)",
          "status": "done",
          "subtasks": [
            {
              "title": "Add feature flag / Remote Config switch to toggle new ingestion path.",
              "status": "done",
              "subtasks": []
            },
            {
              "title": "Document rollback plan (disable flag, purge new fields if needed) in deployment guide.",
              "status": "done",
              "subtasks": []
            }
          ]
        }
      ],
      "qa": [
        "Jest unit tests覆盖 ingestion transformation（成功/失败场景）。 `[Source: architecture.md#8-testing-strategy]`",
        "Jest 集成测试（stubbed Firestore）验证 creation -> cache entry pipeline。 `[Source: architecture.md#8-testing-strategy]`",
        "Playwright `/beta` 检查 & 手动回归确保 legacy feed 不受影响。 `[Source: architecture.md#73-deployment-strategy]`"
      ]
    }
  }
}